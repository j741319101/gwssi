<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dstz.bpm.core.dao.BpmTaskDao">
	<resultMap id="BpmTask" type="com.dstz.bpm.core.model.BpmTask">
		<id property="id" column="id_" jdbcType="VARCHAR"/>
		<result property="name" column="name_" jdbcType="VARCHAR"/>
		<result property="subject" column="subject_" jdbcType="VARCHAR"/>
		<result property="instId" column="inst_id_" jdbcType="VARCHAR"/>
		<result property="taskId" column="task_id_" jdbcType="VARCHAR"/>
		<result property="nodeId" column="node_id_" jdbcType="VARCHAR"/>
		<result property="defId" column="def_id_" jdbcType="VARCHAR"/>
		<result property="assigneeId" column="assignee_id_" jdbcType="VARCHAR"/>
		<result property="assigneeNames" column="assignee_names_" jdbcType="VARCHAR"/>
		<result property="status" column="status_" jdbcType="VARCHAR"/>
		<result property="priority" column="priority_" jdbcType="NUMERIC"/>
		<result property="dueTime" column="due_time_" jdbcType="TIMESTAMP"/>
		<result property="taskType" column="task_type_" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id_" jdbcType="VARCHAR"/>
		<result property="actInstId" column="act_inst_id_" jdbcType="VARCHAR"/>
		<result property="actExecutionId" column="act_execution_id_" jdbcType="VARCHAR"/>
		<result property="typeId" column="type_id_" jdbcType="VARCHAR"/>
		<result property="createTime" column="create_time_" jdbcType="TIMESTAMP"/>
		<result property="createBy" column="create_by_" jdbcType="VARCHAR"/>
		<result property="supportMobile" column="support_mobile_" jdbcType="NUMERIC"/>
		<result property="backNode" column="back_node_" jdbcType="VARCHAR"/>
	</resultMap>
	<resultMap id="BpmTaskVO" type="com.dstz.bpm.core.vo.BpmTaskVO">
		<id property="id" column="id_" jdbcType="VARCHAR"/>
		<result property="name" column="name_" jdbcType="VARCHAR"/>
		<result property="subject" column="subject_" jdbcType="VARCHAR"/>
		<result property="instId" column="inst_id_" jdbcType="VARCHAR"/>
		<result property="taskId" column="task_id_" jdbcType="VARCHAR"/>
		<result property="nodeId" column="node_id_" jdbcType="VARCHAR"/>
		<result property="defId" column="def_id_" jdbcType="VARCHAR"/>
		<result property="assigneeId" column="assignee_id_" jdbcType="VARCHAR"/>
		<result property="assigneeNames" column="assignee_names_" jdbcType="VARCHAR"/>
		<result property="status" column="status_" jdbcType="VARCHAR"/>
		<result property="priority" column="priority_" jdbcType="NUMERIC"/>
		<result property="dueTime" column="due_time_" jdbcType="TIMESTAMP"/>
		<result property="taskType" column="task_type_" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id_" jdbcType="VARCHAR"/>
		<result property="actInstId" column="act_inst_id_" jdbcType="VARCHAR"/>
		<result property="actExecutionId" column="act_execution_id_" jdbcType="VARCHAR"/>
		<result property="typeId" column="type_id_" jdbcType="VARCHAR"/>
		<result property="createTime" column="create_time_" jdbcType="TIMESTAMP"/>
		<result property="createBy" column="create_by_" jdbcType="VARCHAR"/>
		<result property="supportMobile" column="support_mobile_" jdbcType="NUMERIC"/>
		<result property="backNode" column="back_node_" jdbcType="VARCHAR"/>
		<result property="creator" column="creator_" jdbcType="VARCHAR"/>
		<result property="checkTime" column="check_time_" jdbcType="TIMESTAMP"/>
		<result property="checkStatus" column="check_status_" jdbcType="VARCHAR"/>
		<result property="linkId" column="link_id_" jdbcType="VARCHAR"/>
		<result property="instStatus" column="inst_status_" jdbcType="VARCHAR"/>
		<result property="linkTaskType" column="link_task_type_" jdbcType="VARCHAR"/>
		<result property="instCreateTime" column="inst_create_time_" jdbcType="VARCHAR"/>
		<result property="instName" column="inst_name_" jdbcType="VARCHAR"/>
		<result property="nodeTypeKey" column="node_type_key_" jdbcType="VARCHAR"/>
		<result property="nodeTypeName" column="node_type_name_" jdbcType="VARCHAR"/>
		<result property="linkOrgId" column="link_org_id_" jdbcType="VARCHAR"/>
		<result property="linkIdentity" column="link_identity_" jdbcType="VARCHAR"/>
		<result property="linkIdentityName" column="link_identity_name_" jdbcType="VARCHAR"/>
	</resultMap>
	<insert id="create" parameterType="com.dstz.bpm.core.model.BpmTask">
		INSERT INTO bpm_task
		(id_,name_,subject_,inst_id_,task_id_,node_id_,def_id_,assignee_id_,assignee_names_,status_,priority_,due_time_,task_type_,parent_id_,act_inst_id_,act_execution_id_,type_id_,create_time_,create_by_,support_mobile_)
		VALUES 
		(#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{subject,jdbcType=VARCHAR}, #{instId,jdbcType=VARCHAR}, #{taskId,jdbcType=VARCHAR}, #{nodeId,jdbcType=VARCHAR}, #{defId,jdbcType=VARCHAR}, #{assigneeId,jdbcType=VARCHAR}, #{assigneeNames,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{priority,jdbcType=NUMERIC}, #{dueTime,jdbcType=TIMESTAMP}, #{taskType,jdbcType=VARCHAR}, #{parentId,jdbcType=VARCHAR}, #{actInstId,jdbcType=VARCHAR}, #{actExecutionId,jdbcType=VARCHAR}, #{typeId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{supportMobile,jdbcType=NUMERIC})
	</insert>

	<select id="get"   parameterType="java.lang.String" resultMap="BpmTask">
		SELECT * FROM bpm_task 
		WHERE 
		id_=#{id}
	</select>

	<select id="query" parameterType="java.util.Map" resultMap="BpmTask">
		SELECT task.* FROM bpm_task task
		<where>
			exists (select 1 from bpm_instance inst where task.inst_id_ = inst.id_ and inst.is_test_data_ = 0)
			<if test="whereSql!=null">
				and ${whereSql}
			</if>
			<if test="orgIds!=null">
				and DEF_ID_ in (select id_ from bpm_definition where org_id_ in
				<foreach collection="orgIds" item="orgId" index="index" open="(" close=")" separator=",">
					#{orgId}
				</foreach>
				)
			</if>
			<if test="orgId!=null">
				and DEF_ID_ in (select id_ from bpm_definition where org_id_ =#{orgId})
			</if>
		</where>
		<if test="orderBySql!=null">
			ORDER BY ${orderBySql}
		</if>
		<if test="orderBySql==null">
			ORDER BY id_ DESC
		</if>
	</select>

	<update id="update" parameterType="com.dstz.bpm.core.model.BpmTask">
		UPDATE bpm_task SET
		name_=#{name,jdbcType=VARCHAR},
		subject_=#{subject,jdbcType=VARCHAR},
		task_id_=#{taskId,jdbcType=VARCHAR},
		node_id_=#{nodeId,jdbcType=VARCHAR},
		def_id_=#{defId,jdbcType=VARCHAR},
		assignee_id_=#{assigneeId,jdbcType=VARCHAR},
		assignee_names_=#{assigneeNames,jdbcType=VARCHAR},
		status_=#{status,jdbcType=VARCHAR},
		priority_=#{priority,jdbcType=NUMERIC},
		due_time_=#{dueTime,jdbcType=TIMESTAMP},
		task_type_=#{taskType,jdbcType=VARCHAR},
		parent_id_=#{parentId,jdbcType=VARCHAR},
		act_inst_id_=#{actInstId,jdbcType=VARCHAR},
		act_execution_id_=#{actExecutionId,jdbcType=VARCHAR},
		type_id_=#{typeId,jdbcType=VARCHAR},
		create_time_=#{createTime,jdbcType=TIMESTAMP},
		create_by_=#{createBy,jdbcType=VARCHAR},
		support_mobile_=#{supportMobile,jdbcType=NUMERIC},
		back_node_=#{backNode,jdbcType=VARCHAR}
		WHERE
		id_=#{id}
	</update>

	<delete id="remove" parameterType="java.lang.String">
		DELETE FROM bpm_task 
		WHERE
		id_=#{id}
	</delete>

	<delete id="removeByInstId" parameterType="java.lang.String">
		DELETE FROM bpm_task 
		WHERE
		inst_id_=#{instId}
	</delete>

	<select id="getByInstIdNodeId"   parameterType="java.util.Map" resultMap="BpmTask">
		SELECT * FROM bpm_task
		WHERE  inst_id_=#{instId}
		<if test="nodeId!=null">
		and node_id_ = #{nodeId}
		</if>
	</select>
	<select id="getSignTaskBySignSourceId"   parameterType="java.util.Map" resultMap="BpmTask">
		SELECT * FROM bpm_task
		WHERE task_id_= #{taskId}
	</select>
	<select id="getByParentId"   parameterType="java.lang.String" resultMap="BpmTask">
		SELECT * FROM bpm_task 
		WHERE 
		parent_id_=#{parentId}
	</select>


	<select id="getTodoList" parameterType="java.util.Map" resultMap="BpmTaskVO">
		SELECT DISTINCT
		task.id_, task.name_, task.subject_, task.inst_id_, task.task_id_,
		task.act_inst_id_, task.act_execution_id_, task.node_id_, task.def_id_,
		task.assignee_id_, task.status_,
		task.priority_, task.due_time_, task.task_type_, task.parent_id_, task.type_id_,
		task.create_time_, task.create_by_, task.support_mobile_, task.back_node_,
		instance.creator_,instance.STATUS_ inst_status_,
		instance.CREATE_TIME_ inst_create_time_,
		instance.def_name_ inst_name_,
		linkd.check_status_,linkd.check_time_,
		node.KEY_ node_type_key_,
		node.NAME_ node_type_name_,
		linkd.id_ link_id_,linkd.task_type_ link_task_type_
		FROM bpm_task task
		 LEFT JOIN bpm_task_identitylink linkd on task.id_ = linkd.task_id_
		 LEFT JOIN bpm_instance instance on task.inst_id_ = instance.id_
		 LEFT JOIN SYS_TREE_NODE node on task.TYPE_ID_ = node.ID_
		<if test="supportMobile">
			inner join bpm_definition def on task.def_id_ = def.id_ and def.support_mobile_ = '1'
		</if>
		<if test="industryTable!=null">
			inner join bpm_bus_link buslink ON task.inst_id_ = buslink.inst_id_
			inner join ${industryTable} e ON buslink.biz_id_ = e.${industryPKColumn}
		</if>
		<where>			
			<if test="whereSql!=null">
				${whereSql}
			</if>
			and ((task.assignee_id_ = '0' and linkd.permission_code_ in  <foreach collection="userRights" index="index" item="permissionCode" open="(" separator="," close=")">#{permissionCode}</foreach> )
			or (task.assignee_id_ = #{userId} AND (task.STATUS_ != 'LOCK' OR (task.STATUS_ = 'LOCK' and (linkd.IDENTITY_ = #{userId} or linkd.TYPE_ != 'user') ))))
			AND instance.is_test_data_ = 0
		</where>
		<if test="orderBySql!=null">
			ORDER BY ${orderBySql}
		</if>
		<if test="orderBySql==null">
			ORDER BY task.id_ DESC
		</if>
	</select>

	<select id="getMyTaskNum" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="mysql">
		select
		   (select  count(1) from (SELECT DISTINCT task.id_ FROM bpm_task task LEFT JOIN bpm_task_identitylink linkd on task.id_ = linkd.task_id_
		   WHERE (((task.assignee_id_ = '0' and linkd.permission_code_ in <foreach collection="userRights" index="index" item="permissionCode" open="(" separator="," close=")">#{permissionCode}</foreach> )
             		or (task.assignee_id_ =  #{userId} ))
             	  and (task.task_type_ != 'LEADER' or (task.task_type_ = 'LEADER' and exists (select 1 from bpm_leader_task_log leader where task.id_ = leader.task_id_ and leader.flag_ = '1' and leader.type_ = '1')))
				  and exists (select 1 from bpm_instance instance where task.inst_id_ = instance.id_ and instance.is_test_data_ = 0)
             	  )
              ) abc) toDoNum,
		   (select count(1) from bpm_instance where create_by_ = #{userId} and is_test_data_ = 0) appInstNum,
		   (select count(1) from form_def WHERE type_ = 'pc_iview') formNum,
		   (select count(1) from bpm_definition where is_main_ = 'Y') bpmDefNum,
		   (select count(1) from bus_table) tableNum,
		   (select count(1) FROM bus_object) objectNum,
		   (select count(1) from bpm_task_opinion opinion where status_ not in ('start','skip','end')
		   	and exists (select 1 from bpm_instance inst where inst.id_ = opinion.inst_id_ and inst.is_test_data_ = 0)) doneANum,
		   (select count(1) from BPM_TASK task where TASK_TYPE_ != 'SIGN_SOURCE'
			and exists (select 1 from bpm_instance inst where inst.id_ = task.inst_id_ and inst.is_test_data_ = 0)) toDoANum
	</select>

	<select id="getMyTaskNum" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="drds">
		select
			(select  count(1) from (SELECT DISTINCT task.id_ FROM bpm_task task LEFT JOIN bpm_task_identitylink linkd on task.id_ = linkd.task_id_
				WHERE (((task.assignee_id_ = '0' and linkd.permission_code_ in <foreach collection="userRights" index="index" item="permissionCode" open="(" separator="," close=")">#{permissionCode}</foreach> )
						or (task.assignee_id_ =  #{userId} ))
					and (task.task_type_ != 'LEADER' or (task.task_type_ = 'LEADER' and exists (select 1 from bpm_leader_task_log leader where task.id_ = leader.task_id_ and leader.flag_ = '1' and leader.type_ = '1')))
					and exists (select 1 from bpm_instance instance where task.inst_id_ = instance.id_ and instance.is_test_data_ = 0)
					)
			) abc) toDoNum,
			(select count(1) from bpm_instance where create_by_ = #{userId} and is_test_data_ = 0) appInstNum,
			(select count(1) from form_def WHERE type_ = 'pc_iview') formNum,
			(select count(1) from bpm_definition where is_main_ = 'Y') bpmDefNum,
			(select count(1) from bus_table) tableNum,
			(select count(1) FROM bus_object) objectNum,
			(select count(1) from bpm_task_opinion opinion where status_ not in ('start','skip','end')
				and exists (select 1 from bpm_instance inst where inst.id_ = opinion.inst_id_ and inst.is_test_data_ = 0)) doneANum,
			(select count(1) from BPM_TASK task where TASK_TYPE_ != 'SIGN_SOURCE'
				and exists (select 1 from bpm_instance inst where inst.id_ = task.inst_id_ and inst.is_test_data_ = 0)) toDoANum
	</select>


	<select id="getMyTaskNum" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="kingbase">
		select
			(select  count(1) from (SELECT DISTINCT task.id_ FROM bpm_task task LEFT JOIN bpm_task_identitylink linkd on task.id_ = linkd.task_id_
				WHERE (((task.assignee_id_ = '0' and linkd.permission_code_ in <foreach collection="userRights" index="index" item="permissionCode" open="(" separator="," close=")">#{permissionCode}</foreach> )
					or (task.assignee_id_ =  #{userId} ))
				and (task.task_type_ != 'LEADER' or (task.task_type_ = 'LEADER' and exists (select 1 from bpm_leader_task_log leader where task.id_ = leader.task_id_ and leader.flag_ = '1' and leader.type_ = '1')))
				and exists (select 1 from bpm_instance instance where task.inst_id_ = instance.id_ and instance.is_test_data_ = 0)
				)
			) abc) toDoNum,
			(select count(1) from bpm_instance where create_by_ = #{userId} and is_test_data_ = 0) appInstNum,
			(select count(1) from form_def WHERE type_ = 'pc_iview') formNum,
			(select count(1) from bpm_definition where is_main_ = 'Y') bpmDefNum,
			(select count(1) from bus_table) tableNum,
			(select count(1) FROM bus_object) objectNum,
			(select count(1) from bpm_task_opinion opinion where status_ not in ('start','skip','end')
			and exists (select 1 from bpm_instance inst where inst.id_ = opinion.inst_id_ and inst.is_test_data_ = 0)) doneANum,
			(select count(1) from BPM_TASK task where TASK_TYPE_ != 'SIGN_SOURCE'
			and exists (select 1 from bpm_instance inst where inst.id_ = task.inst_id_ and inst.is_test_data_ = 0)) toDoANum
	</select>

	<select id="getTodoListTypeCount" parameterType="java.util.Map" resultType="com.dstz.bpm.core.model.BpmTypeTreeCountVO">
		SELECT defKey  as id, count(*) as count,min(defName) as name ,min(typeId) as parentId from (
		SELECT DISTINCT task.*, def.key_ as defKey,def.type_id_ as typeId,def.name_ as defName FROM bpm_task task LEFT JOIN bpm_task_identitylink link on task.id_ = link.task_id_
		inner join bpm_definition def on task.def_id_ = def.id_  <if test="supportMobile"> and def.support_mobile_ = '1' </if>
		inner join bpm_instance inst on task.inst_id_ = inst.id_ and inst.is_test_data_ = 0
		<where>
			<if test="whereSql!=null">
				${whereSql}
			</if>
			and ((task.assignee_id_ = '0' and link.permission_code_ in  <foreach collection="userRights" index="index" item="permissionCode" open="(" separator="," close=")">#{permissionCode}</foreach> )
			or task.assignee_id_ = #{userId})
		</where>
		) t
		GROUP BY defKey
	</select>

	<select id="selectTaskIdByInstId" parameterType="string" resultType="string">
		SELECT task_id_ FROM bpm_task WHERE inst_id_ = #{instId,jdbcType=VARCHAR}
	</select>

	<select id="getMyTaskNum" parameterType="java.util.Map" resultType="java.util.HashMap">
		select
		   (select  count(1) from (SELECT DISTINCT task.id_ FROM bpm_task task LEFT JOIN bpm_task_identitylink linkd on task.id_ = linkd.task_id_
		   inner JOIN bpm_instance instance on task.inst_id_ = instance.id_ and instance.is_test_data_ = 0
		   WHERE ((task.assignee_id_ = '0' and linkd.permission_code_ in <foreach collection="userRights" index="index" item="permissionCode" open="(" separator="," close=")">#{permissionCode}</foreach> )
		      or (task.assignee_id_ =  #{userId}))
			 and (task.task_type_ != 'LEADER' or (task.task_type_ = 'LEADER' and exists (select 1 from bpm_leader_task_log leader where task.id_ = leader.task_id_ and leader.flag_ = '1' and leader.type_ = '1')))) abc) toDoNum,
		   (select count(1) from bpm_instance where create_by_ = #{userId} and is_test_data_ = 0) appInstNum,
		   (select count(1) from form_def WHERE type_ = 'pc_iview') formNum,
		   (select count(1) from bpm_definition where is_main_ = 'Y') bpmDefNum,
		   (select count(1) from bus_table) tableNum,
		   (select count(1) FROM bus_object) objectNum,
		   (select count(1) from bpm_task_opinion opinion where status_ not in ('start','skip','end')
		   		and exists (select 1 from bpm_instance inst where inst.id_ = opinion.inst_id_ and inst.is_test_data_ = 0)) doneANum,
		   (select count(1) from BPM_TASK task where TASK_TYPE_ != 'SIGN_SOURCE'
				and exists (select 1 from bpm_instance inst where inst.id_ = task.inst_id_ and inst.is_test_data_ = 0)) toDoANum
		from dual
	</select>

	<select id="getUnionOrder" parameterType="java.util.Map" resultType="java.util.HashMap">
		select * from (select * from (
		select * from (select '流程定义' type,def.ID_,def.NAME_,(select node.NAME_ from SYS_TREE_NODE node where node.ID_ = def.TYPE_ID_) GROUP_NAME_ ,UPDATE_TIME_
		from BPM_DEFINITION def order by UPDATE_TIME_ desc) def_order where rownum &lt; 9 union
		select * from (select '表单定义' type,form.ID_,form.NAME_,form.GROUP_NAME_ ,UPDATE_TIME_ from FORM_DEF form order by UPDATE_TIME_ desc) form_order where rownum &lt; 9
		union select * from (select '业务对象定义' type,obj.ID_,obj.NAME_,obj.GROUP_NAME_ ,UPDATE_TIME_ from BUS_OBJECT obj order by UPDATE_TIME_ desc) obj_order where rownum &lt; 9
		union select * from (select '业务实体定义' type,tab.ID_,tab.NAME_,tab.GROUP_NAME_ ,UPDATE_TIME_ from BUS_TABLE tab order by UPDATE_TIME_ desc) tab_order where rownum &lt; 9
		) union_data order by UPDATE_TIME_) where rownum &lt; 9
	</select>
	<select id="getUnionOrder" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="highgo">
		select * from (
			select * from (select '流程定义' type_d,def.ID_,def.NAME_,(select node.NAME_ from SYS_TREE_NODE node where node.ID_ = def.TYPE_ID_) GROUP_NAME_ ,UPDATE_TIME_
				  from BPM_DEFINITION def order by UPDATE_TIME_ desc  limit 8) defOrder
			union
			select * from (select '表单定义' type_d,form.ID_,form.NAME_,form.GROUP_NAME_ ,UPDATE_TIME_ from FORM_DEF form order by UPDATE_TIME_ desc limit 8) formOrder
			union
			select * from (select '业务对象定义' type_d,obj.ID_,obj.NAME_,obj.GROUP_NAME_ ,UPDATE_TIME_ from BUS_OBJECT obj order by UPDATE_TIME_ desc limit 8) obj_order
			union
			select * from (select '业务实体定义' type_d,tab.ID_,tab.NAME_,tab.GROUP_NAME_ ,UPDATE_TIME_ from BUS_TABLE tab order by UPDATE_TIME_ desc limit 8) tab_order
		) union_data order by UPDATE_TIME_ limit 8
	</select>
	<select id="getUnionOrder" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="mysql">
		select * from (
			select * from (select '流程定义' type_d,def.ID_,def.NAME_,(select node.NAME_ from SYS_TREE_NODE node where node.ID_ = def.TYPE_ID_) GROUP_NAME_ ,UPDATE_TIME_
				  from BPM_DEFINITION def order by UPDATE_TIME_ desc  limit 8) defOrder
			union
			select * from (select '表单定义' type_d,form.ID_,form.NAME_,form.GROUP_NAME_ ,UPDATE_TIME_ from FORM_DEF form order by UPDATE_TIME_ desc limit 8) formOrder
			union
			select * from (select '业务对象定义' type_d,obj.ID_,obj.NAME_,obj.GROUP_NAME_ ,UPDATE_TIME_ from BUS_OBJECT obj order by UPDATE_TIME_ desc limit 8) obj_order
			union
			select * from (select '业务实体定义' type_d,tab.ID_,tab.NAME_,tab.GROUP_NAME_ ,UPDATE_TIME_ from BUS_TABLE tab order by UPDATE_TIME_ desc limit 8) tab_order
		) union_data order by UPDATE_TIME_ limit 8
	</select>
	<select id="getUnionOrder" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="drds">
		select * from (
			select * from (select '流程定义' type,def.ID_,def.NAME_,(select node.NAME_ from SYS_TREE_NODE node where node.ID_ = def.TYPE_ID_) GROUP_NAME_ ,UPDATE_TIME_
				  from BPM_DEFINITION def order by UPDATE_TIME_ desc  limit 8) defOrder
			union
			select * from (select '表单定义' type,form.ID_,form.NAME_,form.GROUP_NAME_ ,UPDATE_TIME_ from FORM_DEF form order by UPDATE_TIME_ desc limit 0, 8) formOrder
			union
			select * from (select '业务对象定义' type,obj.ID_,obj.NAME_,obj.GROUP_NAME_ ,UPDATE_TIME_ from BUS_OBJECT obj order by UPDATE_TIME_ desc limit 0, 8) obj_order
			union
			select * from (select '业务实体定义' type,tab.ID_,tab.NAME_,tab.GROUP_NAME_ ,UPDATE_TIME_ from BUS_TABLE tab order by UPDATE_TIME_ desc limit 0, 8) tab_order
		) union_data order by UPDATE_TIME_ limit 0, 8
	</select>
	<select id="getUnionOrder" parameterType="java.util.Map" resultType="java.util.HashMap" databaseId="kingbase">
		select * from (
			select * from (select '流程定义' type,def.ID_,def.NAME_,(select node.NAME_ from SYS_TREE_NODE node where node.ID_ = def.TYPE_ID_) GROUP_NAME_ ,UPDATE_TIME_
				  from BPM_DEFINITION def order by UPDATE_TIME_ desc  limit 8) defOrder
			union
			select * from (select '表单定义' type,form.ID_,form.NAME_,form.GROUP_NAME_ ,UPDATE_TIME_ from FORM_DEF form order by UPDATE_TIME_ desc limit 0, 8) formOrder
			union
			select * from (select '业务对象定义' type,obj.ID_,obj.NAME_,obj.GROUP_NAME_ ,UPDATE_TIME_ from BUS_OBJECT obj order by UPDATE_TIME_ desc limit 0, 8) obj_order
			union
			select * from (select '业务实体定义' type,tab.ID_,tab.NAME_,tab.GROUP_NAME_ ,UPDATE_TIME_ from BUS_TABLE tab order by UPDATE_TIME_ desc limit 0, 8) tab_order
		) union_data order by UPDATE_TIME_ limit 0, 8
	</select>
	<select id="getByParam"   parameterType="java.util.Map" resultMap="BpmTask">
		SELECT * FROM bpm_task
		WHERE 1 = 1
		<if test="actInstId!=null">
			and act_inst_id_ = #{actInstId}
		</if>
		<if test="actExecutionId!=null">
			and act_execution_id_ = #{actExecutionId}
		</if>
	</select>

	<select id="getTaskLinksInfo" parameterType="java.util.Map" resultMap="BpmTaskVO">
		SELECT TASK.*,
			TLINK.ID_ LINK_ID_,TLINK.TASK_TYPE_ LINK_TASK_TYPE_,TLINK.ORG_ID_ LINK_ORG_ID_,
			TLINK.IDENTITY_ LINK_IDENTITY_,TLINK.IDENTITY_NAME_ LINK_IDENTITY_NAME_
		FROM BPM_TASK TASK
		LEFT JOIN BPM_TASK_IDENTITYLINK TLINK ON TASK.ID_ = TLINK.TASK_ID_
		<where>
			<if test="whereSql!=null">
				${whereSql}
			</if>
		</where>
		<if test="orderBySql!=null">
			ORDER BY ${orderBySql}
		</if>
		<if test="orderBySql==null">
			ORDER BY TASK.ID_ DESC
		</if>
	</select>
</mapper>
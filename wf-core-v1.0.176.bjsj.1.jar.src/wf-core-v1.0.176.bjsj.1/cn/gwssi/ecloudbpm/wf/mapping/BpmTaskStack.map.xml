<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gwssi.ecloudbpm.wf.core.dao.BpmTaskStackDao">
    <resultMap id="BpmTaskStack" type="cn.gwssi.ecloudbpm.wf.core.model.BpmTaskStack">
        <id property="id" column="id_" jdbcType="VARCHAR"/>
        <result property="taskId" column="task_id_" jdbcType="VARCHAR"/>
        <result property="instId" column="inst_id_" jdbcType="VARCHAR"/>
        <result property="parentId" column="parent_id_" jdbcType="VARCHAR"/>
        <result property="nodeId" column="node_id_" jdbcType="VARCHAR"/>
        <result property="nodeName" column="node_name_" jdbcType="VARCHAR"/>
        <result property="startTime" column="start_time_" jdbcType="TIMESTAMP"/>
        <result property="endTime" column="end_time" jdbcType="TIMESTAMP"/>
        <result property="isMulitiTask" column="is_muliti_task_" jdbcType="NUMERIC"/>
        <result property="nodeType" column="node_type_" jdbcType="VARCHAR"/>
        <result property="actionName" column="action_name_" jdbcType="VARCHAR"/>
        <result property="trace" column="trace_" jdbcType="VARCHAR"/>
        <result property="level" column="level" jdbcType="NUMERIC"/>
    </resultMap>

    <insert id="create" parameterType="cn.gwssi.ecloudbpm.wf.core.model.BpmTaskStack">
		INSERT INTO bpm_task_stack
		(id_,task_id_,inst_id_,parent_id_,node_id_,node_name_,start_time_,end_time,is_muliti_task_,node_type_,action_name_,trace_)
		VALUES
		(#{id,jdbcType=VARCHAR}, #{taskId,jdbcType=VARCHAR}, #{instId,jdbcType=VARCHAR}, #{parentId,jdbcType=VARCHAR}, #{nodeId,jdbcType=VARCHAR}, #{nodeName,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{isMulitiTask,jdbcType=NUMERIC}, #{nodeType,jdbcType=VARCHAR}, #{actionName,jdbcType=VARCHAR},#{trace,jdbcType=VARCHAR})
	</insert>

    <select id="get" parameterType="java.lang.String" resultMap="BpmTaskStack">
		SELECT * FROM bpm_task_stack
		WHERE
		id_=#{id}
	</select>

    <select id="query" parameterType="java.util.Map" resultMap="BpmTaskStack">
        SELECT * FROM bpm_task_stack
        <where>
            <if test="whereSql!=null">
                ${whereSql}
            </if>
        </where>
        <if test="orderBySql!=null">
            ORDER BY ${orderBySql}
        </if>
        <if test="orderBySql==null">
            ORDER BY id_ DESC
        </if>
    </select>

    <update id="update" parameterType="cn.gwssi.ecloudbpm.wf.core.model.BpmTaskStack">
		UPDATE bpm_task_stack SET
		task_id_=#{taskId,jdbcType=VARCHAR},
		parent_id_=#{parentId,jdbcType=VARCHAR},
		node_id_=#{nodeId,jdbcType=VARCHAR},
		node_name_=#{nodeName,jdbcType=VARCHAR},
		start_time_=#{startTime,jdbcType=TIMESTAMP},
		end_time=#{endTime,jdbcType=TIMESTAMP},
		is_muliti_task_=#{isMulitiTask,jdbcType=NUMERIC},
		node_type_=#{nodeType,jdbcType=VARCHAR},
		action_name_=#{actionName,jdbcType=VARCHAR},
		trace_=#{trace,jdbcType=VARCHAR}
		WHERE
		id_=#{id}
	</update>

    <delete id="remove" parameterType="java.lang.String">
		DELETE FROM bpm_task_stack
		WHERE
		id_=#{id}
	</delete>

    <update id="updateStackEndByInstId" parameterType="java.util.Map">
        UPDATE BPM_TASK_STACK SET END_TIME = #{endTime,jdbcType=TIMESTAMP} , ACTION_NAME_ = 'end' WHERE INST_ID_ = #{instId} AND END_TIME IS NULL
    </update>

    <select id="getByTaskId" parameterType="java.lang.String" resultMap="BpmTaskStack">
		SELECT * FROM bpm_task_stack
		WHERE
		task_id_=#{taskId}
	</select>

    <select id="getByInstanceId" parameterType="java.lang.String" resultMap="BpmTaskStack">
		SELECT * FROM bpm_task_stack
		WHERE
		inst_id_=#{instanceId}
	</select>

    <delete id="removeByInstanceId" parameterType="java.lang.String">
		DELETE FROM bpm_task_stack
		WHERE
		inst_id_=#{instId}
	</delete>
    <select id="getTaskStackByIteration" parameterType="java.util.Map" resultMap="BpmTaskStack">
        select stack.*,level from BPM_TASK_STACK stack
        <where>
            <if test="whereSql!=null">
                ${whereSql}
            </if>
        </where>
        <if test="taskId!=null">
            start with task_id_ = #{taskId}
        </if>
        <if test="taskId==null">
            start with inst_id_ = #{instId} and node_id_ = #{nodeId}
        </if>
        <choose>
            <when test="prior == 'FORWARD'">
                connect by prior id_ = parent_id_
            </when>
            <otherwise>
                connect by id_ = prior parent_id_
            </otherwise>
        </choose>
        <if test="orderBySql!=null">
            ORDER BY ${orderBySql}
        </if>
    </select>

    <select id="getTaskStackByIterationMysql" parameterType="java.util.Map" resultMap="BpmTaskStack" databaseId="mysql">
        {call queryStack(#{taskId}, #{prior},  #{whereSql}, #{orderSql})}
    </select>

    <select id="getTaskStackByIterationMysql" parameterType="java.util.Map" resultMap="BpmTaskStack" databaseId="drds">
        {call queryStack(#{taskId}, #{prior},  #{whereSql}, #{orderSql})}
    </select>

    <select id="getTaskStackByIterationHighGo" parameterType="java.util.Map" resultMap="BpmTaskStack">
        select  ai.id id_ ,
                ai.task_id task_id_,
                ai.inst_id inst_id_,
                ai.parent_id parent_id_,
                ai.node_id node_id_,
                ai.node_name node_name_,
                ai.start_time start_time_,
                ai.end_time end_time,
                ai.is_muliti_task is_muliti_task_,
                ai.node_type node_type_,
                ai.action_name action_name_,
                ai.trace trace_,
                ai.level "level"
        from queryStack(#{taskId}, #{prior},  #{whereSql}, #{orderSql}) ai
    </select>
</mapper>